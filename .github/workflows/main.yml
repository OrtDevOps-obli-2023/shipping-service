name: CI/CD Shipping Service

on:
  push:
    branches:
      - main
      - feature/*

env:
  ECR_REGISTRY: "${{ vars.ECR_REGISTRY }}"
  ECR_REPOSITORY: "${{ vars.ECR_REPOSITORY }}"
  IMAGE_TAG: "${{ github.sha }}"
  ECS_SERVICE: "MY_ECS_SERVICE" # set this to your Amazon ECS service name
  ECS_CLUSTER: "MY_ECS_CLUSTER" # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    "MY_ECS_TASK_DEFINITION" # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    "MY_CONTAINER_NAME" # set this to the name of the container in the
    # containerDefinitions section of your task definition

  AWS_REGION: "${{ vars.AWS_REGION }}"
  APPROVERS: "SebaORT,JNMiguel, deploy-approvers-fe-angular"
  CI_ENV: "staging"

jobs:
  check-repo:
    name: Check Repo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create artifact repo
        uses: actions/upload-artifact@v2
        with:
          name: checkout-repo
          path: ${{ github.workspace }}

  unit-test:
    needs: check-repo
    name: Pruebas Unitest
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: "Run Tests"
        uses: ./.github/actions/run-maven-tests

  #sonarcloud test
  code-test:
    needs: unit-test
    name: Prueba code static
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: "11"
      - name: Analyze with SonarCloud
        run: ./.github/scripts/mavenAnalyze.sh
        shell: bash
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY_SONAR_CLOUD }}
          ORG_NAME: ${{ vars.ORG_NAME }}
          SONAR_HOST_URL: ${{vars.SONAR_HOST_URL}}
          GITHUB_TOKEN: ${{ secrets.TOKEN_API }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-push-ecr:
    needs: code-test
    name: Etapa ECR AWS
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.setImageOutput.outputs.image }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: checkout-repo
          path: ${{ github.workspace }}

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Output
        id: setImageOutput
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.setImageOutput.outputs.image }}
  dev:
    needs: build-push-ecr
    uses: ./.github/workflows/deploy.yml
    with:
      CI_ENV: "dev"
      IMAGE: "${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}"
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TOKEN_API: ${{ secrets.TOKEN_API }}
      ECS_SERVICE: "service" # set this to your Amazon ECS service name
      ECS_CLUSTER: "cluster" # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: "task-definition" # set this to the path to your Amazon ECS task definition
      CONTAINER_NAME: "container" # set this to the name of the container in the

  staging:
    needs: [dev, build-push-ecr]
    uses: ./.github/workflows/deploy.yml
    with:
      CI_ENV: "staging"
      IMAGE: ${{needs.build-push-ecr.outputs.image}}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TOKEN_API: ${{ secrets.TOKEN_API }}
      ECS_SERVICE: "service" # set this to your Amazon ECS service name
      ECS_CLUSTER: "cluster" # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: "task-definition" # set this to the path to your Amazon ECS task definition
      CONTAINER_NAME: "container" # set this to the name of the container in the
  prod:
    needs: [staging, build-push-ecr]
    uses: ./.github/workflows/deploy.yml
    with:
      CI_ENV: "prod"
      IMAGE: ${{needs.build-push-ecr.outputs.image}}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TOKEN_API: ${{ secrets.TOKEN_API }}
      ECS_SERVICE: "service" # set this to your Amazon ECS service name
      ECS_CLUSTER: "cluster" # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: "task-definition" # set this to the path to your Amazon ECS task definition
      CONTAINER_NAME: "container" # set this to the name of the container in the
